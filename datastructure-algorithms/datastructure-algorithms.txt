1. 动态数组
2. 链表
    单向链表
    带哨兵单向链表
    双向链表
    双向循环链表
3. 栈

4. 队列

4.1. 双向队列
4.2. 优先队列
实现：
    无序数组
    有序数组
    堆

4.3. 阻塞队列


5. 堆
概念：堆是一种基于树的数据结构，通常用完全二叉树实现。
特性：
    大顶堆中，任意节点C与它的父亲节点P符合P.value>=C.value
    小顶堆中，任意节点C与它的父亲节点P符合P.value<=C.value
    顶层节点root
父子节点的特性：
    如果从索引0开始存储节点数据
        节点i的父节点为floor((i-1)/2),当i>0时
        节点i的左子节点为2i+1，右子节点为2i+2，当然它们得<size
    如果从索引1开始存储节点数据
        节点i的父节点为floor(i/2),当i>0时
                节点i的左子节点为2i，右子节点为2i+1，当然它们得<size
方法：
    节点上浮：与父节点比较，交换位置
    节点下沉：与两个子节点中较大的（大顶堆）交换位置。
建堆方法：
    Floyd算法：找到最后一个非叶子节点，依次往后进行下沉。时间复杂度 O(n)。
    威廉莫斯算法： 将每个元素依次比较加入堆中。时间复杂度O(n*logn)。
建堆特性：
    找最后一个非叶子节点的 size/2 -1，往后依次下沉直到root


6. 二叉树
遍历：
    深度优先遍历
    广度优先遍历
深度优先遍历：
    先序：父左右
    中序：左父右
    后序：左右父
6.1 二叉搜索树 BinarySearchTree

前驱节点：
    有左子树，左子树的最大值。
    无左子树，离他最近自左而来的祖先节点。parent.right
后继节点：
    有右子树，右子树的最小值。
    无右子树，离他最近自右而来的祖先节点。 parent.left
删除节点：
    删除节点没有左孩子，将右孩子托孤给被删节点的父节点(parent)
    删除节点没有右孩子，将左孩子托孤给被删节点的父节点(parent)
    删除节点左右孩子都没有，已经涵盖在情况1，情况2当中，把null托孤给parent
    删除节点左右孩子都有，可以将它的后继节点(称为S)托孤(shift)给被删节点的父节点(Parent)，再将此后继节点的父亲节点(称为SP)，又分为两种情况
        1. SP就是要被删除的节点，此时被删除节点(deleted)和后继结点(S)相邻。只需要将S托孤(shift)给被删节点的父节点(parent)。
        2. SP不是要被删除的节点，此时被删除节点(deleted)和后继结点(S)不相邻。此时需要将(S)的后代托孤(shift)给后继结点的父节点(SP)，再将后继结点(S)托孤给被删节点的父节点(Parent)。

6.2 二叉平衡树 AVLTree

方法：
判断节点是否平衡：如果一个节点的左右孩子高度差超过1，则此节点失衡，需要进行旋转。
节点对象：AvlNode{
    key,value,right, left, height = 1,
}
节点的高度更新：    max(leftHeight, rightHeight) + 1
平衡因子(balance factor) = leftHeight - rightHeight
     < -1   >1 失衡
     0  1  -1 平衡
失衡情况：
   失衡节点：失衡节点子节点
    LL：右旋一次  bf(node) > 1 && bf(node.left) >=0
    LR：子树左转，树右旋 bf(node) >1 && bf(node.left) < 0
    RR：左旋一次  bf(node) < -1 && bf(node.right) <=0
    RL

    节点的高度
    更新高度
    平衡因子 balance factor












