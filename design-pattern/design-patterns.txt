创建者模式
1. 单例模式

2. 简单工厂模式

3. 工厂方法模式

4. 抽象工厂模式


5. 原型模式
    结构：
        抽象原型：Cloneable （浅克隆）
        具体原型: 实现上接口的类
    分类：
        浅克隆：创建一个对象，新对象的属性和原有对象完全相同。对于非基本类型属性，仍指向原有属性所指向的内存地址。
        深克隆：创建一个对象，新对象的属性和原有对象完全相同。对于非基本类型属性，不在指向原有属性所指向的内存地址。
        深克隆使用序列化机制实现。
6. 建造者模式
    结构：
        抽象建造者
        具体建造者
        产品
        指挥者


结构型模式
1. 代理模式：
分类：
    静态代理
    动态代理
        JDK动态代理
        CGlib动态代理
结构：
    抽象主题
    真实主题：实现抽象主题
    代理类：实现抽象主题，聚合真实主题。
2. 适配器模式
定义：将一个类的接口转为客户希望的另一个接口，使原本不兼容的接口能够使用。
分类：类适配器模式，对象适配器模式
结构：
    目标接口
    适配者
    适配器
实例：
    JDK中 Reader和InputStream 使用StreamDecoder做适配 StreamDecoder继承了Reader 聚合了InputStream

3. 装饰者模式
定义： 在不改变现有对象结构的情况下，动态的给对象增加一些职责。
结构：
    抽象构建
    具体构建
    抽象装饰
    具体装饰
应用：
    JDK中BufferWrite BufferReader
4. 桥接模式(Bridge)
定义： 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合性
结构：
    抽象化角色: 定义抽象类，并包含一个对实例化对象的引用
    扩展抽象化角色：通过组合方式，调用实例化角色的业务方法。
    实现化角色
    具体实现化角色

5. 外观模式(Facade)
定义： 是一种通过对多个复杂子系统提供一个一致接口，而使这些系统更易访问。
结构：
    外观角色
    子系统角色
应用：
    tomcat中RequestFacade类对象

6. 组合模式
定义： 又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来描述部分以及整体层次。
结构：
    抽象根节点：定义系统各层次对象共有的属性和方法，可以预定义一些属性和方法。
    树枝节点：定义树枝节点的行为，存储叶子节点，形成树结构。
    叶子节点
应用：
    树形结构目录等。

7. 享元模式(Flyweight)
定义： 运用共享技术来有效地支持大量细粒度对象的复用。减少创建对象的开销。
结构：
    状态：1. 内部状态，即不会随着环境的改变而改变。
         2. 外部状态，环境的改变而改变的状态，不可共享的状态。
    抽象享元角色
    具体享元角色
    非享元角色
    享元工厂角色
应用：
    Integer 中IntegerCache  -128<= 数字<=127


行为型模式：
    类行为型： 模板方法模式
    对象行为型
1. 模板方法模式
定义：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
结构：
    抽象类：给出算法的骨架，和一些基本方法。
        基本方法：
            抽象方法
            具体方法
            钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。方法名一般是isXxx
    具体子类：实现抽象类
应用：
    InputStream类中定了多个read()

2. 策略模式Strategy
定义：
结构：
    抽象策略
    具体策略
    环境类：持有策略类引用，供客户端调用

应用：
    Comparator  Arrays环境类 Arrays.sort();

3. 命令模式
定义：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分开。这样两者之间通过命令进行沟通，这样方便将命令对象进行存储，传递，调用，增加与管理。
结构：
    抽象命令类角色： 定义命令的接口，声明执行方法。
    具体命令角色： 具体的命令，实现命名接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。
    实现者/接收者角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。
    调用者/请求者角色： 要求命令对象执行请求，通常持有多个命令对象。

4. 责任链模式
定义：
结构：
应该：
    javaweb中FilterChain


5. 状态模式
定义： 对有状态的对象，把复杂的判断逻辑提取到不同的状态对象中，允许状态对象在其内部状态改变时改变其行为。
结构：
    环境角色：也称上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态处理。
    抽象状态角色：定义一个接口，用以封装环境对象中特定状态所对应的行为。
    具体状态角色：实现抽象状态所对应的行为。

6. 观察者模式
定义：又称为发布-订阅模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一主题对象。这个主题对象在发生状态变化时，会通知所有的观察者对象，使他们能够自动更新。
结构：
    抽象主题（抽象被观察者）：抽象主题角色把所有观察者保存到一个集合中，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加，删除观察者。
    具体主题(具体被观察者):该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。
    抽象观察者： 是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。
    具体观察者：实现抽象观察者定义的更新接口。

7. 中介者模式
定义：又叫调停模式，定义了一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。
结构：
    抽象中介者角色：是中介者接口，提供了同事对象注册与转发同事对象消息的抽象方法。
    具体中介者角色：实现中介者接口，定义一个集合来保存同事对象，协调同事之间的交互方法。因此它依赖于同事角色。
    抽象同事类角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同时类的公共功能。
    具体同事类角色：是抽象同事类的实现者。当需要与其他同事交互时，由中介对象负责后续交互。


8. 迭代器模式

9. 访问者模式
定义： 封装一些作用与某种数据结构中的各元素的操作，它可以在不改变这种数据结构的前提下定义作用于这些元素的新操作。
