1. 原型模式
    结构：
        抽象原型：Cloneable （浅克隆）
        具体原型: 实现上接口的类
    分类：
        浅克隆：创建一个对象，新对象的属性和原有对象完全相同。对于非基本类型属性，仍指向原有属性所指向的内存地址。
        深克隆：创建一个对象，新对象的属性和原有对象完全相同。对于非基本类型属性，不在指向原有属性所指向的内存地址。
        深克隆使用序列化机制实现。
2.建造者模式
    结构：
        抽象建造者
        具体建造者
        产品
        指挥者


结构型模式
1. 代理模式：
分类：
    静态代理
    动态代理
        JDK动态代理
        CGlib动态代理
结构：
    抽象主题
    真实主题：实现抽象主题
    代理类：实现抽象主题，聚合真实主题。
2. 适配器模式
定义：将一个类的接口转为客户希望的另一个接口，使原本不兼容的接口能够使用。
分类：类适配器模式，对象适配器模式
结构：
    目标接口
    适配者
    适配器
实例：
    JDK中 Reader和InputStream 使用StreamDecoder做适配 StreamDecoder继承了Reader 聚合了InputStream

3. 装饰者模式
定义： 在不改变现有对象结构的情况下，动态的给对象增加一些职责。
结构：
    抽象构建
    具体构建
    抽象装饰
    具体装饰
